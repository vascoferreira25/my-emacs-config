;;; vs-dark-alternative-theme.el --- My First Custom Theme -*- lexical-binding: t; -*-

;;; Code:
(deftheme vs-dark-alternative)
(let* (
       ;; Standardized Color Palette
       (color-black                    "#000000")
       (color-gray                     "#383838")
       (color-white                    "#FFFFFF")
       (color-yellow                   "#FCD13B")
       (color-lightorange              "#EE9393")
       (color-orange                   "#f16969")
       (color-lightred                 "#C66384")
       (color-red                      "#BF3966")
       (color-red-bg                   "#993D5C")
       (color-amaranth                 "#C42E2E")
       (color-green                    "#44BF39")
       (color-green-bg                 "#398033")
       (color-lightgreen               "#8BFF80")
       (color-bluegreen                "#4EC9B0")
       (color-cyan                     "#22DFDF")
       (color-teal                     "#1693A5")
       (color-lightblue                "#9CDCFE")
       (color-skyblue                  "#12B9F7")
       (color-blue                     "#1B8FE0")
       (color-blue-bg                  "#1168A6")
       (color-pink                     "#D96CD0")
       (color-magenta                  "#EE00EE")
       (color-lightpurple              "#785CE0")
       (color-purple                   "#5F3CE3")

       (class '((class color) (min-colors 89)))
       (fg0                            "#AEAFAD")
       (fg1                            "#BFBFBF") ; default fg
       (fg2                            "#e8e8e8")
       (fg3                            "#f4f4f4")
       (fg4                            "#fafafa")
       (bg0                            "#161A1A")
       (bg1                            "#171717") ; default bg
       (bg2                            "#252526")
       (bg3                            "#313131")
       (bg4                            "#4b474c")
       (bg-hl                          color-blue)
       (key2                           color-lightorange) ; hotkeys
       (key3                           color-lightblue)
       (accent                         "#ffffff")
       (numeric                        "#b5cea8")
       (builtin                        color-pink)
       (keyword                        color-blue)
       (preprocessor                   color-pink)
       (const                          color-cyan)
       (comment                        color-cyan)
       (comment-bg                     "#1F2429")
       (doc                            color-cyan)
       (doc-bg                         comment-bg)
       (func                           color-yellow)
       (str                            color-orange)
       (type                           color-cyan)
       (var                            color-lightblue)
       (warning                        color-lightorange)

       ;; Orgmode
       (color-block-begin              nil)
       (color-block-end                nil)
       (color-block-fg                 "#7E868D")
       (color-block-bg                 "#131414")
       (color-block-begin-box          "#3F484C")
       (color-block-end-box            "#3F484C")

       ;; UI
       (color-highlight-line           "#0F0F0F")
       (color-highlight-text           "#313E4B")
       (color-line-num-bg              nil)

       ;; Modeline
       (color-mode-line                "#0F0F0F")
       (color-mode-line-inactive       "#121212")

       ;; LSP
       (color-highlight-symbol         "#343a40"))

  (custom-theme-set-faces
   'vs-dark-alternative
   `(default                                  ((,class (:background ,bg1 :foreground ,fg1))))

   `(font-lock-builtin-face                   ((,class (:foreground ,builtin))))
   `(font-lock-comment-face                   ((,class (:foreground ,comment :background ,comment-bg))))
   `(font-lock-negation-char-face             ((,class (:foreground ,const))))
   `(font-lock-reference-face                 ((,class (:foreground ,const))))
   `(font-lock-constant-face                  ((,class (:foreground ,const))))
   `(font-lock-doc-face                       ((,class (:foreground ,doc :background ,doc-bg :bold nil))))
   `(font-lock-function-name-face             ((,class (:foreground ,func :bold nil))))
   `(font-lock-keyword-face                   ((,class (:bold nil :foreground ,keyword))))
   `(font-lock-preprocessor-face              ((,class (:bold nil :foreground ,preprocessor))))
   `(font-lock-string-face                    ((,class (:foreground ,str))))
   `(font-lock-type-face                      ((,class (:bold t :foreground ,type ))))
   `(font-lock-variable-name-face             ((,class (:foreground ,var))))
   `(font-lock-warning-face                   ((,class (:foreground ,warning :background ,bg2))))
   `(font-lock-regexp-grouping-backslash      ((,class (:foreground ,color-lightorange))))
   `(font-lock-regexp-grouping-construct      ((,class (:foreground ,color-lightorange))))

   `(region                                   ((,class (:background ,bg-hl))))
   `(highlight                                ((,class (:foreground ,fg1 :background ,color-highlight-text))))
   `(hl-line                                  ((,class (:background ,color-highlight-line :box (:line-width -1 :color ,color-gray)))))
   `(fringe                                   ((,class (:background ,bg1 :foreground ,fg1))))
   `(cursor                                   ((,class (:background ,color-skyblue))))
   `(show-paren-match-face                    ((,class (:background ,warning :bold t))))
   `(show-paren-match                         ((t (:foreground ,color-black :background ,warning :bold t))))
   `(show-paren-mismatch                      ((t (:background ,warning))))
   `(isearch                                  ((,class (:bold nil :foreground ,accent :background ,bg4))))
   `(vertical-border                          ((,class (:foreground ,bg3))))
   `(minibuffer-prompt                        ((,class (:foreground ,color-cyan :weight normal))))
   `(default-italic                           ((,class (:italic t))))
   `(link                                     ((,class (:foreground ,const :underline t))))
   `(error                                    ((,class (:foreground ,color-orange :underline t :bold t))))
   `(warning                                  ((,class (:foreground ,color-magenta))))
   `(success                                  ((,class (:foreground ,color-cyan))))
   `(dired-directory                          ((t (:inherit (font-lock-keyword-face)))))

   `(hydra-face-amaranth                      ((t (:foreground ,color-amaranth))))
   `(hydra-face-blue                          ((t (:foreground ,color-blue))))
   `(hydra-face-pink                          ((t (:foreground ,color-pink))))
   `(hydra-face-red                           ((t (:foreground ,color-red))))
   `(hydra-face-teal                          ((t (:foreground ,color-cyan))))

   `(hydra-posframe-border-face               ((t (:background ,comment))))
   `(hydra-posframe-face                      ((t (:background ,color-highlight-line))))
   
   `(line-number                              ((t (:foreground ,color-blue :background nil))))
   `(line-number-current-line                 ((t (:foreground ,color-cyan :background ,color-highlight-line))))
   `(linum                                    ((,class (:foreground ,color-blue :background nil))))

   `(centaur-tabs-active-bar-face             ((t  (:background ,warning :bold t :foreground ,warning))))
   `(centaur-tabs-selected                    ((t  (:background ,color-mode-line))))
   `(centaur-tabs-unselected                  ((t  (:background ,color-mode-line-inactive))))

   `(telephone-line-evil                      ((t  (:background ,fg4))))
   `(telephone-line-evil-normal               ((t  (:background ,color-red :inherit telephone-line-evil))))
   `(telephone-line-evil-insert               ((t  (:background ,color-cyan :inherit telephone-line-evil))))
   `(telephone-line-evil-visual               ((t  (:background ,color-orange :inherit telephone-line-evil))))
   `(telephone-line-evil-operator             ((t  (:background ,doc :inherit telephone-line-evil))))
   `(telephone-line-evil-emacs                ((t  (:background ,color-blue :inherit telephone-line-evil))))
   `(telephone-line-evil-motion               ((t  (:background ,warning :inherit telephone-line-evil))))

   `(mode-line                                ((,class (:bold nil :foreground ,fg4 :background ,color-mode-line))))
   `(mode-line-inactive                       ((,class (:bold nil :foreground ,fg1 :background ,color-mode-line-inactive))))
   `(mode-line-buffer-id                      ((,class (:bold nil :foreground ,accent :background nil))))
   `(mode-line-highlight                      ((,class (:foreground ,keyword :box nil :weight normal))))
   `(mode-line-emphasis                       ((,class (:foreground ,fg1))))

   `(lsp-ui-doc-header                        ((t (:bold t :foreground ,color-cyan :background nil))))
   `(lsp-ui-doc-header                        ((t (:foreground ,color-blue :background nil))))
   `(lsp-ui-doc-border                        ((t (:background ,color-blue))))
   `(lsp-ui-doc-background                    ((t (:background ,bg1))))
   
   `(company-preview-common                   ((t (:foreground unspecified :background ,bg2))))
   `(company-scrollbar-bg                     ((t (:background ,bg2))))
   `(company-scrollbar-fg                     ((t (:background ,bg3))))
   `(company-tooltip                          ((t (:inherit default :background ,bg2))))
   `(company-tooltip-common                   ((t (:foreground ,color-blue :bold t))))
   `(company-tooltip-selection                ((t (:background ,bg-hl))))
   `(company-tooltip-annotation               ((t (:foreground ,doc)))) ; parameter hints etc.

   `(org-document-title                       ((,class (:bold t :foreground ,color-cyan :background nil :height 1.2 :underline nil))))
   `(org-level-1                              ((,class (:bold t :foreground ,color-cyan :background nil :height 1.2 :underline nil))))
   `(org-level-2                              ((,class (:bold t :foreground ,color-cyan :background nil :height 1.2 :underline nil))))
   `(org-level-3                              ((,class (:bold t :foreground ,color-cyan :background nil :height 1.2 :underline nil))))
   `(org-level-4                              ((,class (:bold t :foreground ,color-cyan :background nil :height 1.2 :underline nil))))
   `(org-level-5                              ((,class (:bold t :foreground ,color-cyan :background nil :height 1.2 :underline nil))))
   `(org-level-6                              ((,class (:bold t :foreground ,color-cyan :background nil :height 1.2 :underline nil))))
   `(org-level-7                              ((,class (:bold t :foreground ,color-cyan :background nil :height 1.2 :underline nil))))
   `(org-level-8                              ((,class (:bold t :foreground ,color-cyan :background nil :height 1.2 :underline nil))))
   `(org-hide                                 ((,class (:foreground ,bg1))))
   `(org-date                                 ((,class (:underline t :foreground ,var) )))
   `(org-footnote                             ((,class (:underline t :foreground ,fg4))))
   `(org-link                                 ((,class (:underline t :foreground ,color-blue))))
   `(org-target                               ((,class (:underline t :foreground ,color-red))))
   `(org-special-keyword                      ((,class (:foreground ,color-green))))
   `(org-block                                ((,class (:foreground ,fg2 :background ,color-block-bg :extend t))))
   `(org-block-begin-line                     ((,class (:foreground ,color-block-fg :background ,color-block-begin :box (:line-width -1 :color ,color-block-begin-box)))))
   `(org-block-end-line                       ((,class (:foreground ,color-block-fg :background ,color-block-end :box (:line-width -1 :color ,color-block-end-box)))))
   `(org-quote                                ((,class (:inherit org-block :slant italic))))
   `(org-verse                                ((,class (:inherit org-block :slant italic))))
   `(org-todo                                 ((,class (:foreground ,str :background ,comment-bg :bold nil))))
   `(org-done                                 ((,class (:foreground ,str :background ,comment-bg :bold nil))))
   `(org-warning                              ((,class (:underline t :foreground ,warning))))
   `(org-agenda-structure                     ((,class (:weight normal :foreground ,fg3 :box (:color ,fg4) :background ,bg3))))
   `(org-agenda-date                          ((,class (:foreground ,var :height 1.1 ))))
   `(org-agenda-date-weekend                  ((,class (:weight normal :foreground ,fg4))))
   `(org-agenda-date-today                    ((,class (:weight normal :foreground ,keyword :height 1.2))))
   `(org-agenda-done                          ((,class (:foreground ,bg4))))
   `(org-scheduled                            ((,class (:foreground ,type))))
   `(org-scheduled-today                      ((,class (:foreground ,func :weight normal :height 1.2))))
   `(org-ellipsis                             ((,class (:foreground ,builtin))))
   `(org-code                                 ((,class (:foreground ,color-red :background ,color-mode-line))))
   `(org-verbatim                             ((,class (:foreground ,color-lightpurple :background ,color-mode-line))))
   `(org-document-info-keyword                ((,class (:foreground ,color-green))))
   `(org-sexp-date                            ((,class (:foreground ,fg4))))
   `(org-table                                ((,class (:foreground ,comment :background ,comment-bg))))

   `(font-latex-bold-face                     ((,class (:foreground ,type))))
   `(font-latex-italic-face                   ((,class (:foreground ,key3 :italic t))))
   `(font-latex-string-face                   ((,class (:foreground ,str))))
   `(font-latex-match-reference-keywords      ((,class (:foreground ,const))))
   `(font-latex-match-variable-keywords       ((,class (:foreground ,var))))

   `(ido-only-match                           ((,class (:foreground ,keyword))))
   `(ido-subdir                               ((,class (:weight normal :foreground ,fg0))))
   `(ido-first-match                          ((,class (:foreground ,keyword :bold nil))))

   `(gnus-header-content                      ((,class (:foreground ,keyword))))
   `(gnus-header-from                         ((,class (:foreground ,var))))
   `(gnus-header-name                         ((,class (:foreground ,type))))
   `(gnus-header-subject                      ((,class (:foreground ,func :bold nil))))

   `(mu4e-view-url-number-face                ((,class (:foreground ,type))))
   `(mu4e-cited-1-face                        ((,class (:foreground ,fg2))))
   `(mu4e-cited-7-face                        ((,class (:foreground ,fg3))))
   `(mu4e-header-marks-face                   ((,class (:foreground ,type))))

   `(ffap                                     ((,class (:foreground ,fg4))))

   `(js2-private-function-call                ((,class (:foreground ,const))))
   `(js2-jsdoc-html-tag-delimiter             ((,class (:foreground ,str))))
   `(js2-jsdoc-html-tag-name                  ((,class (:foreground ,key2))))
   `(js2-external-variable                    ((,class (:foreground ,type  ))))
   `(js2-function-param                       ((,class (:foreground ,const))))
   `(js2-jsdoc-value                          ((,class (:foreground ,str))))
   `(js2-private-member                       ((,class (:foreground ,fg3))))
   `(js2-warning                              ((t (:underline ,warning))))
   `(js2-error                                ((t (:foreground ,warning :weight normal))))
   `(js2-jsdoc-tag                            ((t (:foreground ,var))))
   `(js2-jsdoc-type                           ((t (:foreground ,var))))
   `(js2-instance-member                      ((t (:foreground ,var))))
   `(js2-object-property                      ((t (:foreground ,func))))
   `(js2-magic-paren                          ((t (:foreground ,const))))
   `(js2-function-call                        ((t (:foreground ,const))))
   `(js2-keywords                             ((t (:foreground ,keyword))))
   `(js3-warning-face                         ((,class (:underline ,keyword))))
   `(js3-error-face                           ((,class (:underline ,warning))))
   `(js3-external-variable-face               ((,class (:foreground ,var))))
   `(js3-function-param-face                  ((,class (:foreground ,key3))))
   `(js3-jsdoc-tag-face                       ((,class (:foreground ,keyword))))
   `(js3-instance-member-face                 ((,class (:foreground ,const))))

   `(ac-completion-face                       ((,class (:underline t :foreground ,keyword))))
   `(info-quoted-name                         ((,class (:foreground ,builtin))))
   `(info-string                              ((,class (:foreground ,str))))
   `(icompletep-determined                    ((,class :foreground ,builtin)))

   `(slime-repl-inputed-output-face           ((,class (:foreground ,type))))
   `(trailing-whitespace                      ((,class :foreground nil :background ,warning)))
   `(lazy-highlight                           ((,class (:foreground ,fg2 :background ,bg3))))

   `(undo-tree-visualizer-current-face        ((,class :foreground ,builtin)))
   `(undo-tree-visualizer-default-face        ((,class :foreground ,fg2)))
   `(undo-tree-visualizer-unmodified-face     ((,class :foreground ,var)))
   `(undo-tree-visualizer-register-face       ((,class :foreground ,type)))

   `(rainbow-delimiters-depth-1-face          ((,class :foreground ,color-yellow)))
   `(rainbow-delimiters-depth-2-face          ((,class :foreground ,color-pink)))
   `(rainbow-delimiters-depth-3-face          ((,class :foreground ,color-blue)))
   `(rainbow-delimiters-depth-4-face          ((,class :foreground ,color-yellow)))
   `(rainbow-delimiters-depth-5-face          ((,class :foreground ,color-pink)))
   `(rainbow-delimiters-depth-6-face          ((,class :foreground ,color-blue)))
   `(rainbow-delimiters-depth-7-face          ((,class :foreground ,color-yellow)))
   `(rainbow-delimiters-depth-8-face          ((,class :foreground ,color-pink)))
   `(rainbow-delimiters-depth-9-face          ((,class :foreground ,color-blue)))
   `(rainbow-delimiters-unmatched-face        ((,class :foreground ,warning)))

   `(magit-item-highlight                     ((,class :background ,bg3)))
   `(magit-hunk-heading                       ((,class (:background ,bg3))))
   `(magit-hunk-heading-highlight             ((,class (:background ,bg3))))
   `(magit-bisect-bad                         ((t (:foreground ,color-red))))
   `(magit-bisect-good                        ((t (:foreground ,color-green))))
   `(magit-bisect-skip                        ((t (:foreground ,color-orange))))
   `(magit-blame-date                         ((t (:foreground ,color-red))))
   `(magit-blame-heading                      ((t (:foreground ,color-orange :background ,bg3 :extend t))))
   `(magit-branch                             ((,class (:foreground ,color-blue :weight normal))))
   `(magit-branch-current                     ((t (:foreground ,color-blue))))
   `(magit-branch-local                       ((t (:foreground ,color-cyan))))
   `(magit-branch-remote                      ((t (:foreground ,color-green))))
   `(magit-cherry-equivalent                  ((t (:foreground ,color-magenta))))
   `(magit-cherry-unmatched                   ((t (:foreground ,color-cyan))))
   `(magit-diff-added                         ((t (:foreground ,fg2 :background ,color-green-bg :extend t))))
   `(magit-diff-added-highlight               ((t (:foreground ,fg3 :background ,color-green :extend t))))
   `(magit-diff-removed                       ((t (:foreground ,fg2 :background ,color-red-bg :extend t))))
   `(magit-diff-removed-highlight             ((t (:foreground ,fg3 :background ,color-red :extend t))))
   `(magit-diff-base                          ((t (:foreground ,bg1 :background ,color-orange :extend t))))
   `(magit-diff-base-highlight                ((t (:foreground ,color-orange :background ,bg3 :extend t))))
   `(magit-diff-context                       ((t (:foreground ,fg0 :extend t))))
   `(magit-diff-context-highlight             ((,class (:foreground ,fg1 :background ,bg2))))
   `(magit-diff-file-header                   ((,class (:foreground ,fg2 :background ,bg3))))
   `(magit-diff-file-heading                  ((t (:foreground ,fg1 :extend t))))
   `(magit-diff-file-heading-highlight        ((t (:background ,bg3 :extend t))))
   `(magit-diff-file-heading-selection        ((t (:foreground ,color-orange :background ,bg3 :extend t))))
   `(magit-diff-hunk-heading                  ((t (:foreground ,fg1 :background ,bg3 :extend t))))
   `(magit-diff-hunk-heading-highlight        ((t (:background ,bg3 :extend t))))
   `(magit-diff-lines-heading                 ((t (:foreground ,color-yellow :background ,color-red :extend t))))
   `(magit-diffstat-added                     ((t (:foreground ,color-green))))
   `(magit-diffstat-removed                   ((t (:foreground ,color-orange))))
   `(magit-dimmed                             ((t (:foreground ,comment))))
   `(magit-filename                           ((t (:foreground ,color-magenta))))
   `(magit-hash                               ((t (:foreground ,comment))))
   `(magit-header-line                        ((t (:inherit nil))))
   `(magit-log-author                         ((t (:foreground ,color-orange))))
   `(magit-log-date                           ((t (:foreground ,color-blue))))
   `(magit-log-graph                          ((t (:foreground ,comment))))
   `(magit-mode-line-process                  ((t (:foreground ,color-orange))))
   `(magit-mode-line-process-error            ((t (:foreground ,color-red))))
   `(magit-process-ok                         ((t (:inherit success))))
   `(magit-process-ng                         ((t (:inherit error))))
   `(magit-reflog-amend                       ((t (:foreground ,color-magenta))))
   `(magit-reflog-checkout                    ((t (:foreground ,color-blue))))
   `(magit-reflog-cherry-pick                 ((t (:foreground ,color-green))))
   `(magit-reflog-commit                      ((t (:foreground ,color-green))))
   `(magit-reflog-merge                       ((t (:foreground ,color-green))))
   `(magit-reflog-other                       ((t (:foreground ,color-cyan))))
   `(magit-reflog-rebase                      ((t (:foreground ,color-magenta))))
   `(magit-reflog-remote                      ((t (:foreground ,color-cyan))))
   `(magit-reflog-reset                       ((t (:inherit error))))
   `(magit-refname                            ((t (:foreground ,comment))))
   `(magit-section-heading                    ((t (:foreground ,color-magenta))))
   `(magit-section-heading-selection          ((t (:foreground ,color-orange :extend t))))
   `(magit-section-highlight                  ((t (:background ,bg3 :extend t))))
   `(magit-sequence-drop                      ((t (:foreground ,color-red))))
   `(magit-sequence-head                      ((t (:foreground ,color-blue))))
   `(magit-sequence-part                      ((t (:foreground ,color-orange))))
   `(magit-sequence-stop                      ((t (:foreground ,color-green))))
   `(magit-signature-bad                      ((t (:inherit error))))
   `(magit-signature-error                    ((t (:inherit error))))
   `(magit-signature-expired-key              ((t (:foreground ,color-orange))))
   `(magit-signature-good                     ((t (:inherit success))))
   `(magit-signature-revoked                  ((t (:foreground ,color-magenta))))
   `(magit-signature-untrusted                ((t (:foreground ,color-cyan))))
   `(magit-tag                                ((t (:foreground ,color-yellow))))

   `(term                                     ((,class (:foreground ,fg1 :background ,bg1))))
   `(term-color-black                         ((,class (:foreground ,bg3 :background ,bg3))))
   `(term-color-blue                          ((,class (:foreground ,color-blue :background ,func))))
   `(term-color-red                           ((,class (:foreground ,color-red :background ,bg3))))
   `(term-color-green                         ((,class (:foreground ,color-green :background ,bg3))))
   `(term-color-yellow                        ((,class (:foreground ,color-yellow :background ,var))))
   `(term-color-magenta                       ((,class (:foreground ,color-magenta :background ,builtin))))
   `(term-color-cyan                          ((,class (:foreground ,color-cyan :background ,str))))
   `(term-color-white                         ((,class (:foreground ,fg1 :background ,fg2))))

   `(diredfl-autofile-name                    ((t (:foreground ,fg0))))
   `(diredfl-compressed-file-name             ((t (:foreground ,color-yellow))))
   `(diredfl-compressed-file-suffix           ((t (:foreground ,doc))))
   `(diredfl-date-time                        ((t (:foreground ,color-cyan))))
   `(diredfl-deletion                         ((t (:foreground ,color-red :bold t))))
   `(diredfl-deletion-file-name               ((t (:foreground ,color-red ))))
   `(diredfl-dir-heading                      ((t (:foreground ,color-blue :bold t))))
   `(diredfl-dir-name                         ((t (:foreground ,color-blue))))
   `(diredfl-dir-priv                         ((t (:foreground ,color-blue))))
   `(diredfl-exec-priv                        ((t (:foreground ,color-green))))
   `(diredfl-executable-tag                   ((t (:foreground ,color-green))))
   `(diredfl-file-name                        ((t (:foreground ,fg1))))
   `(diredfl-file-suffix                      ((t (:foreground ,doc))))
   `(diredfl-flag-mark                        ((t (:foreground ,color-yellow :bold t))))
   `(diredfl-ignored-file-name                ((t (:foreground ,doc))))
   `(diredfl-link-priv                        ((t (:foreground ,color-magenta))))
   `(diredfl-no-priv                          ((t (:foreground ,fg1))))
   `(diredfl-number                           ((t (:foreground ,color-orange))))
   `(diredfl-other-priv                       ((t (:foreground ,color-magenta))))
   `(diredfl-rare-priv                        ((t (:foreground ,fg1))))
   `(diredfl-read-priv                        ((t (:foreground ,color-yellow))))
   `(diredfl-symlink                          ((t (:foreground ,color-magenta))))
   `(diredfl-tagged-autofile-name             ((t (:foreground ,fg0))))
   `(diredfl-write-priv                       ((t (:foreground ,color-red))))

   `(helm-header                              ((,class (:foreground ,fg2 :background ,bg1 :underline nil :box nil))))
   `(helm-source-header                       ((,class (:foreground ,keyword :background ,bg1 :underline nil :weight normal))))
   `(helm-selection                           ((,class (:background ,bg2 :underline nil))))
   `(helm-selection-line                      ((,class (:background ,bg2))))
   `(helm-visible-mark                        ((,class (:foreground ,bg1 :background ,bg3))))
   `(helm-candidate-number                    ((,class (:foreground ,bg1 :background ,fg1))))
   `(helm-separator                           ((,class (:foreground ,type :background ,bg1))))
   `(helm-time-zone-current                   ((,class (:foreground ,builtin :background ,bg1))))
   `(helm-time-zone-home                      ((,class (:foreground ,type :background ,bg1))))
   `(helm-buffer-not-saved                    ((,class (:foreground ,type :background ,bg1))))
   `(helm-buffer-process                      ((,class (:foreground ,builtin :background ,bg1))))
   `(helm-buffer-saved-out                    ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-buffer-size                         ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-ff-directory                        ((,class (:foreground ,func :background ,bg1 :weight normal))))
   `(helm-ff-file                             ((,class (:foreground ,fg1 :background ,bg1 :weight normal))))
   `(helm-ff-executable                       ((,class (:foreground ,key2 :background ,bg1 :weight normal))))
   `(helm-ff-invalid-symlink                  ((,class (:foreground ,key3 :background ,bg1 :weight normal))))
   `(helm-ff-symlink                          ((,class (:foreground ,keyword :background ,bg1 :weight normal))))
   `(helm-ff-prefix                           ((,class (:foreground ,bg1 :background ,keyword :weight normal))))
   `(helm-grep-cmd-line                       ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-grep-file                           ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-grep-finish                         ((,class (:foreground ,fg2 :background ,bg1))))
   `(helm-grep-lineno                         ((,class (:foreground ,fg1 :background ,bg1))))
   `(helm-grep-match                          ((,class (:foreground nil :background nil :inherit helm-match))))
   `(helm-grep-running                        ((,class (:foreground ,func :background ,bg1))))
   `(helm-moccur-buffer                       ((,class (:foreground ,func :background ,bg1))))
   `(helm-source-go-package-godoc-description ((,class (:foreground ,str))))
   `(helm-bookmark-w3m                        ((,class (:foreground ,type))))

   `(web-mode-html-tag-bracket-face           ((,class (:foreground "#808080"))))
   `(web-mode-html-tag-face                   ((,class (:foreground ,keyword))))
   `(web-mode-html-attr-name-face             ((,class (:foreground ,var))))
   `(web-mode-html-attr-value-face            ((,class (:foreground ,str))))
   `(web-mode-builtin-face                    ((,class (:inherit ,font-lock-builtin-face))))
   `(web-mode-comment-face                    ((,class (:inherit ,font-lock-comment-face))))
   `(web-mode-constant-face                   ((,class (:inherit ,font-lock-constant-face))))
   `(web-mode-keyword-face                    ((,class (:foreground ,keyword))))
   `(web-mode-doctype-face                    ((,class (:inherit ,font-lock-doc-face))))
   `(web-mode-function-name-face              ((,class (:inherit ,font-lock-function-name-face))))
   `(web-mode-string-face                     ((,class (:foreground ,str))))
   `(web-mode-type-face                       ((,class (:inherit ,font-lock-type-face))))
   `(web-mode-warning-face                    ((,class (:inherit ,font-lock-warning-face))))
   `(web-mode-json-key-face                   ((,class (:foreground ,str))))
   `(web-mode-json-context-face               ((,class (:foreground ,str))))

   `(diff-header                              ((t (:foreground ,color-cyan :background nil))))
   `(diff-file-header                         ((t (:foreground ,fg3 :background nil))))
   `(diff-hunk-header                         ((t (:foreground ,fg4 :background ,bg3))))
   `(diff-added                               ((t (:foreground ,fg2 :background ,color-green-bg))))
   `(diff-removed                             ((t (:foreground ,fg2 :background ,color-red-bg))))
   `(diff-changed                             ((t (:foreground ,fg2 :background ,color-blue-bg))))
   `(diff-refine-added                        ((t (:foreground ,fg3 :background ,color-green))))
   `(diff-refine-removed                      ((t (:foreground ,fg3 :background ,color-red))))
   `(diff-refine-changed                      ((t (:foreground ,fg3 :background ,color-blue))))

   `(ediff-fine-diff-Ancestor                 ((t (:background ,color-red))))
   `(ediff-fine-diff-A                        ((t (:background ,color-red))))
   `(ediff-fine-diff-B                        ((t (:background ,color-green))))
   `(ediff-fine-diff-C                        ((t (:background ,color-blue))))
   `(ediff-current-diff-Ancestor              ((t (:background ,color-red-bg))))
   `(ediff-current-diff-A                     ((t (:background ,color-red-bg))))
   `(ediff-current-diff-B                     ((t (:background ,color-green-bg))))
   `(ediff-current-diff-C                     ((t (:background ,color-blue-bg))))
   `(ediff-even-diff-Ancestor                 ((t (:background ,bg3))))
   `(ediff-even-diff-A                        ((t (:background ,bg3))))
   `(ediff-even-diff-B                        ((t (:background ,bg3))))
   `(ediff-even-diff-C                        ((t (:background ,bg3))))
   `(ediff-odd-diff-Ancestor                  ((t (:background ,bg3))))
   `(ediff-odd-diff-A                         ((t (:background ,bg3))))
   `(ediff-odd-diff-B                         ((t (:background ,bg3))))
   `(ediff-odd-diff-C                         ((t (:background ,bg3))))

   `(jde-java-font-lock-package-face          ((t (:foreground ,var))))
   `(jde-java-font-lock-public-face           ((t (:foreground ,keyword))))
   `(jde-java-font-lock-private-face          ((t (:foreground ,keyword))))
   `(jde-java-font-lock-constant-face         ((t (:foreground ,const))))
   `(jde-java-font-lock-modifier-face         ((t (:foreground ,key3))))
   `(jde-jave-font-lock-protected-face        ((t (:foreground ,keyword))))
   `(jde-java-font-lock-number-face           ((t (:foreground ,numeric))))

   `(centaur-tabs-default                     ((t (:background ,bg1 :foreground ,fg1))))
   `(centaur-tabs-selected                    ((t (:background ,bg1 :foreground ,fg3 :box nil))))
   `(centaur-tabs-unselected                  ((t (:background ,bg2 :foreground ,fg0 :box nil))))
   `(centaur-tabs-selected-modified           ((t (:background ,bg2 :foreground ,accent :box nil))))
   `(centaur-tabs-unselected-modified         ((t (:background ,bg2 :foreground ,fg4 :box nil))))
   `(centaur-tabs-active-bar-face             ((t (:background ,accent :box nil))))
   `(centaur-tabs-modified-marker-selected    ((t (:inherit 'centaur-tabs-selected-modified :foreground ,accent :box nil))))
   `(centaur-tabs-modified-marker-unselected  ((t (:inherit 'centaur-tabs-unselected-modified :foreground ,accent :box nil))))

   `(solaire-default-face                     ((t (:inherit default :background ,bg2))))
   `(solaire-minibuffer-face                  ((t (:inherit default :background ,bg2))))
   `(solaire-hl-line-face                     ((t (:inherit hl-line :background ,bg3))))
   `(solaire-org-hide-face                    ((t (:inherit org-hide :background ,bg2))))

   `(ivy-confirm-face                         ((t (:inherit minibuffer-prompt :foreground ,keyword))))
   `(ivy-current-match                        ((t (:background ,bg-hl :extend t))))
   `(ivy-highlight-face                       ((t (:inherit font-lock-builtin-face))))
   `(ivy-match-required-face                  ((t (:inherit minibuffer-prompt :foreground ,warning))))
   `(ivy-minibuffer-match-face-1              ((t (:inherit isearch))))
   `(ivy-minibuffer-match-face-2              ((t (:inherit ivy-minibuffer-match-face-1))))
   `(ivy-minibuffer-match-face-3              ((t (:inherit ivy-minibuffer-match-face-2))))
   `(ivy-minibuffer-match-face-4              ((t (:inherit ivy-minibuffer-match-face-2))))
   `(ivy-minibuffer-match-highlight           ((t (:inherit ivy-current-match))))
   `(ivy-modified-buffer                      ((t (:inherit default :foreground ,var))))
   `(ivy-virtual                              ((t (:inherit default :foreground ,doc))))
   `(ivy-posframe                             ((t (:background "#252526"))))

   `(counsel-key-binding                      ((t (:foreground ,var))))

   `(swiper-match-face-1                      ((t (:inherit ivy-minibuffer-match-face-1))))
   `(swiper-match-face-2                      ((t (:inherit ivy-minibuffer-match-face-2))))
   `(swiper-match-face-3                      ((t (:inherit ivy-minibuffer-match-face-3))))
   `(swiper-match-face-4                      ((t (:inherit ivy-minibuffer-match-face-4))))
   `(swiper-line-face                         ((t (:foreground ,fg0 :background ,bg4 :extend t))))

   `(git-gutter:added                         ((t (:background ,color-green :foreground ,color-green :weight normal))))
   `(git-gutter:deleted                       ((t (:background ,color-red :foreground ,color-red :weight normal))))
   `(git-gutter:modified                      ((t (:background ,color-blue :foreground ,color-blue :weight normal))))
   `(git-gutter-fr:added                      ((t (:background ,color-green :foreground ,color-green :weight normal))))
   `(git-gutter-fr:deleted                    ((t (:background ,color-red :foreground ,color-red :weight normal))))
   `(git-gutter-fr:modified                   ((t (:background ,color-blue :foreground ,color-blue :weight normal))))

   `(diff-hl-insert                           ((t (:background ,color-green :foreground ,color-green))))
   `(diff-hl-delete                           ((t (:background ,color-red :foreground ,color-red))))
   `(diff-hl-change                           ((t (:background ,color-blue :foreground ,color-blue))))

   `(neo-dir-link-face                        ((t (:foreground "#cccccc" :family "Sans Serif"))))
   `(neo-header-face                          ((t (:foreground "#cccccc" :family "Sans Serif"))))
   `(neo-banner-face                          ((t (:foreground "#cccccc" :family "Sans Serif"))))
   `(neo-root-dir-face                        ((t (:foreground "#cccccc" :family "Sans Serif"))))
   `(neo-file-link-face                       ((t (:foreground "#aaaaaa" :family "Sans Serif"))))
   `(neo-expand-btn-face                      ((t (:foreground "#aaaaaa"))))

   `(sml/global                               ((t (:foreground ,fg1 :weight normal))))
   `(sml/filename                             ((t (:foreground ,fg1 :weight normal))))
   `(sml/prefix                               ((t (:foreground ,fg1 :weight normal))))
   `(sml/read-only                            ((t (:foreground ,fg1 :weight normal))))
   `(sml/modes                                ((t (:foreground ,fg1 :weight normal))))

   `(evil-ex-substitute-matches               ((t (:foreground ,warning :weight normal :strike-through t))))
   `(evil-ex-substitute-replacement           ((t (:foreground ,color-cyan :weight normal))))

   `(hl-todo                                  ((t (:inverse-video t))))
   `(highlight-numbers-number                 ((t (:foreground ,numeric))))
   `(highlight-operators-face                 ((t (:inherit default))))
   `(highlight-symbol-face                    ((t (:background ,color-highlight-symbol))))

   ;;; Programming Languages

   ;; Markdown
   `(markdown-header-face-1                   ((t (:inherit org-level-1))))
   `(markdown-header-face-2                   ((t (:inherit org-level-2))))
   `(markdown-header-face-3                   ((t (:inherit org-level-3))))
   `(markdown-header-face-4                   ((t (:inherit org-level-4))))
   `(markdown-header-face-5                   ((t (:inherit org-level-5))))
   `(markdown-header-face-6                   ((t (:inherit org-level-6))))
   `(markdown-header-face-7                   ((t (:inherit org-level-7))))
   `(markdown-header-face-8                   ((t (:inherit org-level-8))))
   `(markdown-link-face                       ((t (:inherit org-link))))
   `(markdown-inline-code-face                ((t (:inherit org-code))))

   ;; Rust
   `(rust-builtin-formatting-macro-face       ((t (:bold nil :inherit font-lock-preprocessor-face))))
   ))

;;;###autoload
(when (and (boundp 'custom-theme-load-path) load-file-name)
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'vs-dark-alternative)
(provide 'vs-dark-alternative-theme)

;;; vs-dark-alternative-theme.el ends here
